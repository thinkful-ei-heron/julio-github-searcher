{"version":3,"sources":["videoplayback.webm","components/Form.js","components/Results.js","components/Video.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","getData","e","preventDefault","props","target","search","value","className","onSubmit","this","type","name","placeholder","required","Component","Results","data","map","repo","key","id","href","html_url","rel","Video","width","autoPlay","loop","src","require","App","state","loading","active","user","fetch","then","setState","json","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gJAAAA,EAAOC,QAAU,IAA0B,4C,qICEtBC,E,2MACnBC,QAAU,SAACC,GACTA,EAAEC,iBACF,EAAKC,MAAMH,QAAQC,EAAEG,OAAOC,OAAOC,OACnCL,EAAEG,OAAOC,OAAOC,MAAQ,I,wEAIxB,OACE,0BAAMC,UAAU,SAASC,SAAUC,KAAKT,SACtC,2BACEU,KAAK,OACLC,KAAK,SACLC,YAAY,oBACZC,UAAQ,IAEV,4BAAQH,KAAK,UAAb,e,GAhB0BI,aCAbC,E,iLAEjB,OACE,wBAAIR,UAAU,WACXE,KAAKN,MAAMa,KAAKC,KAAI,SAACC,GAAD,OACnB,wBAAIC,IAAKD,EAAKE,IACZ,uBAAGC,KAAMH,EAAKI,SAAUlB,OAAO,SAASmB,IAAI,uBACzCL,EAAKP,e,GAPiBG,aCAhBU,E,iLAEjB,OACE,2BAAOjB,UAAU,QAAQkB,MAAM,MAAMC,UAAQ,EAACC,MAAI,GAChD,4BAAQC,IAAKC,EAAQ,IAA0BnB,KAAK,cADtD,oD,GAH6BI,aCIdgB,G,iNACnBC,MAAQ,CACNf,KAAM,GACNgB,SAAS,EACTC,QAAQ,G,EAGVjC,QAAU,SAACkC,GACTC,MAAM,gCAAD,OAAiCD,EAAjC,WACFE,KAAK,EAAKC,SAAS,CAAEL,SAAS,KAC9BI,MAAK,SAACpB,GAAD,OAAUA,EAAKsB,UACpBF,MAAK,SAACpB,GACL,EAAKqB,SAAS,CACZrB,KAAMA,EACNgB,SAAS,EACTC,QAAQ,Q,wEAMd,OACE,oCACE,gCACE,2DAEF,kBAAC,EAAD,CAAMjC,QAASS,KAAKT,UACpB,kBAAC,EAAD,CAASgB,KAAMP,KAAKsB,MAAMf,OACzBP,KAAKsB,MAAME,OAAS,kBAAC,EAAD,MAAY,U,GA5BRnB,cCMbyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,kB","file":"static/js/main.c70d9387.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/videoplayback.3176ac7d.webm\";","import React, { Component } from 'react';\n\nexport default class Form extends Component {\n  getData = (e) => {\n    e.preventDefault();\n    this.props.getData(e.target.search.value);\n    e.target.search.value = '';\n  };\n\n  render() {\n    return (\n      <form className='search' onSubmit={this.getData}>\n        <input\n          type='text'\n          name='search'\n          placeholder='Enter Your GitHub'\n          required\n        ></input>\n        <button type='submit'>Search</button>\n      </form>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Results extends Component {\n  render() {\n    return (\n      <ul className='results'>\n        {this.props.data.map((repo) => (\n          <li key={repo.id}>\n            <a href={repo.html_url} target='_blank' rel='noopener noreferrer'>\n              {repo.name}\n            </a>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Video extends Component {\n  render() {\n    return (\n      <video className='video' width='50%' autoPlay loop>\n        <source src={require('../videoplayback.webm')} type='video/mp4' />\n        Your browser does not support the video tag.\n      </video>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Form from './components/Form';\nimport Results from './components/Results';\nimport Video from './components/Video';\nimport './App.css';\n\nexport default class App extends Component {\n  state = {\n    data: [],\n    loading: false,\n    active: false,\n  };\n\n  getData = (user) => {\n    fetch(`https://api.github.com/users/${user}/repos`)\n      .then(this.setState({ loading: true }))\n      .then((data) => data.json())\n      .then((data) => {\n        this.setState({\n          data: data,\n          loading: false,\n          active: true,\n        });\n      });\n  };\n\n  render() {\n    return (\n      <>\n        <header>\n          <h1>GitHub Searchinator 9000.2</h1>\n        </header>\n        <Form getData={this.getData} />\n        <Results data={this.state.data} />\n        {this.state.active ? <Video /> : null}\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}